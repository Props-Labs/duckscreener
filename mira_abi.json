abi Contract {
    // Function to initialize an LP asset with a name
    #[storage(write)]
    fn initialize_lp_asset(sender: Identity, lp_asset: AssetId, name: String);

    // Function to update the total supply of an LP asset
    #[storage(write)]
    fn update_total_supply(sender: Identity, lp_asset: AssetId, new_supply: u64);

    // Function to retrieve optional pool information by ID
    #[storage(read)]
    fn get_pool_option(pool_id: PoolId) -> Option<PoolInfo>;

    // Function to retrieve pool information by ID
    #[storage(read)]
    fn get_pool(pool_id: PoolId) -> PoolInfo;

    // Function to retrieve the total reserve of a specific asset
    #[storage(read)]
    fn get_total_reserve(asset_id: AssetId) -> u64;

    // Function to update the total reserve for an asset
    #[storage(read, write)]
    fn update_total_reserve(asset_id: AssetId, amount_in: u64, amount_out: u64);

    // Function to retrieve the total supply of LP tokens for an asset
    #[storage(read)]
    fn get_lp_total_supply(asset_id: AssetId) -> Option<u64>;

    // Function to check if an LP asset exists
    #[storage(read)]
    fn lp_asset_exists(asset: AssetId) -> bool;

    // Function to initialize a new pool with the given parameters
    #[storage(read, write)]
    fn initialize_pool(pool_id: PoolId, decimals_0: u8, decimals_1: u8, lp_name: String);

    // Function to mint LP assets
    #[storage(read, write)]
    fn mint_lp_asset(pool_id: PoolId, to: Identity, amount: u64) -> Asset;

    // Function to burn LP assets
    #[storage(read, write)]
    fn burn_lp_asset(pool_id: PoolId, burned_liquidity: Asset) -> u64;

    // Function to get pool liquidity
    #[storage(read)]
    fn get_pool_liquidity(pool_id: PoolId) -> Asset;

    // Function to get the amount of asset input based on the asset ID
    #[storage(read)]
    fn get_amount_in(asset_id: AssetId) -> u64;

    // Function to calculate input/output amounts in accounting
    #[storage(read)]
    fn get_amount_in_accounting_out(asset_id: AssetId, amount_out: u64, to: Identity) -> (u64, u64);

    // Function to update pool reserves based on transaction amounts
    #[storage(read, write)]
    fn update_reserves(pool: PoolInfo, amount_0_in: u64, amount_1_in: u64, amount_0_out: u64, amount_1_out: u64);

    // Function to transfer assets between pools
    fn transfer_assets(pool_id: PoolId, to: Identity, asset_0_out: u64, asset_1_out: u64);

    // Function to get protocol fees for volatile and stable pools
    #[storage(read)]
    fn get_protocol_fees() -> (u64, u64);

    // Function to get LP pool fee
    fn get_lp_pool_fee(pool_id: PoolId, amount_0: u64, amount_1: u64) -> (u64, u64);

    // Function to get protocol pool fee
    #[storage(read)]
    fn get_protocol_pool_fee(pool_id: PoolId, amount_0: u64, amount_1: u64) -> (u64, u64);

    // Function to get the recipient of protocol fees
    #[storage(read)]
    fn get_fee_recipient() -> Option<Identity>;

    // Function to call a hook if available
    #[storage(read)]
    fn call_hook(pool_id: PoolId, to: Identity, asset_0_in: u64, asset_1_in: u64, asset_0_out: u64, asset_1_out: u64, lp_token: u64);

    // SRC20 interface methods
    impl SRC20 {
        #[storage(read)]
        fn total_assets() -> u64;

        #[storage(read)]
        fn total_supply(asset: AssetId) -> Option<u64>;

        #[storage(read)]
        fn name(asset: AssetId) -> Option<String>;

        #[storage(read)]
        fn symbol(asset: AssetId) -> Option<String>;

        #[storage(read)]
        fn decimals(asset: AssetId) -> Option<u8>;
    }

    // MiraAMM interface methods
    impl MiraAMM {
        #[storage(read, write)]
        fn create_pool(token_0_contract_id: ContractId, token_0_sub_id: SubId, token_1_contract_id: ContractId, token_1_sub_id: SubId, is_stable: bool) -> PoolId;

        #[storage(read)]
        fn pool_metadata(pool_id: PoolId) -> Option<PoolMetadata>;

        #[storage(read)]
        fn fees() -> (u64, u64, u64, u64);

        #[storage(write)]
        fn set_protocol_fees(volatile_fee: u64, stable_fee: u64);

        #[storage(write)]
        fn set_hook(contract_id: Option<ContractId>);

        #[storage(read)]
        fn hook() -> Option<ContractId>;

        #[storage(read, write)]
        fn mint(pool_id: PoolId, to: Identity) -> Asset;

        #[payable]
        #[storage(read, write)]
        fn burn(pool_id: PoolId, to: Identity) -> (u64, u64);

        #[payable]
        #[storage(read, write)]
        fn swap(pool_id: PoolId, asset_0_out: u64, asset_1_out: u64, to: Identity, data: Option<Bytes>);

        #[storage(read, write)]
        fn transfer_ownership(new_owner: Identity);
    }
}
